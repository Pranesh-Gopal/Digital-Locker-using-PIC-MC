#include <16F877A.h>
#device ADC=16

#FUSES NOWDT                    //No Watch Dog Timer
#FUSES NOBROWNOUT               //No brownout reset
#FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
#FUSES PUT
#use delay(crystal=4MHz)

#define LCD_ENABLE_PIN PIN_D2
#define LCD_RS_PIN PIN_D0
#define LCD_RW_PIN PIN_D1
#define LCD_DATA4 PIN_D4
#define LCD_DATA5 PIN_D5
#define LCD_DATA6 PIN_D6
#define LCD_DATA7 PIN_D7

#include <lcd.c>

#define PASSWORD_LENGTH 4
const unsigned char correct_password[PASSWORD_LENGTH] = {1, 2, 3, 4};

void blink_led() {
    OUTPUT_A(0xff);
    delay_ms(500);
    OUTPUT_A(0x00);
    delay_ms(500);
}

void display_message(const char *message) {
    lcd_gotoxy(1, 2);
    lcd_putc(message);
    delay_ms(500);
}

void main() {
    unsigned char entered_password[PASSWORD_LENGTH];
    int i = PASSWORD_LENGTH - 1;
    int ag = 1;

    lcd_init();  // Initialize LCD
    OUTPUT_B(0xff);
    port_b_pullups(TRUE);

    while (TRUE) {
        lcd_gotoxy(1, 1);
        lcd_putc("Enter Password:");
        ag = 1;  // Reset position for each attempt

        while (i >= 0) {  // Collect 4 digits
            OUTPUT_B(0xef); // Enable first row
            if (!input(PIN_B0)) { entered_password[i--] = 7; lcd_putc('*'); ag++; while(!input(PIN_B0)); }
            else if (!input(PIN_B1)) { entered_password[i--] = 4; lcd_putc('*'); ag++; while(!input(PIN_B1)); }
            else if (!input(PIN_B2)) { entered_password[i--] = 1; lcd_putc('*'); ag++; while(!input(PIN_B2)); }
            else if (!input(PIN_B3)) { i--; lcd_putc('*'); ag++; while(!input(PIN_B3)); }

            OUTPUT_B(0xff);
            OUTPUT_B(0xdf); // Enable second row
            if (!input(PIN_B0)) { entered_password[i--] = 8; lcd_putc('*'); ag++; while(!input(PIN_B0)); }
            else if (!input(PIN_B1)) { entered_password[i--] = 5; lcd_putc('*'); ag++; while(!input(PIN_B1)); }
            else if (!input(PIN_B2)) { entered_password[i--] = 2; lcd_putc('*'); ag++; while(!input(PIN_B2)); }
            else if (!input(PIN_B3)) { entered_password[i--] = 0; lcd_putc('*'); ag++; while(!input(PIN_B3)); }

            OUTPUT_B(0xff);
            OUTPUT_B(0xbf); // Enable third row
            if (!input(PIN_B0)) { entered_password[i--] = 9; lcd_putc('*'); ag++; while(!input(PIN_B0)); }
            else if (!input(PIN_B1)) { entered_password[i--] = 6; lcd_putc('*'); ag++; while(!input(PIN_B1)); }
            else if (!input(PIN_B2)) { entered_password[i--] = 3; lcd_putc('*'); ag++; while(!input(PIN_B2)); }
            else if (!input(PIN_B3)) { i--; lcd_putc('*'); ag++; while(!input(PIN_B3)); }

            OUTPUT_B(0xff);
            OUTPUT_B(0x7f); // Enable fourth row
            if (!input(PIN_B0)) { i--; lcd_putc('*'); ag++; while(!input(PIN_B0)); }
            else if (!input(PIN_B1)) { i--; lcd_putc('*'); ag++; while(!input(PIN_B1)); }
            else if (!input(PIN_B2)) { i--; lcd_putc('*'); ag++; while(!input(PIN_B2)); }
            else if (!input(PIN_B3)) { i--; lcd_putc('*'); ag++; while(!input(PIN_B3)); }

            OUTPUT_B(0xff);
        }

        // Compare entered password with the correct one
        if (memcmp(entered_password, correct_password, PASSWORD_LENGTH) == 0) {
            blink_led();
            display_message("Password Correct");
        } else {
            display_message("Password Incorrect");
        }
       
        i = PASSWORD_LENGTH - 1;  // Reset for the next attempt
    }
}
